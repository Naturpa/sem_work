import telebot
from telebot import types
from config import BOT_TOKEN
from logger import DialogLogger
from parser import NewsParser
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –º–æ–¥—É–ª–µ–π
bot = telebot.TeleBot(BOT_TOKEN)
logger = DialogLogger()
parser = NewsParser()


def create_main_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'),
        types.KeyboardButton('üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π'),
        types.KeyboardButton('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'),
        types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    ]
    keyboard.add(*buttons)
    return keyboard


def log_and_send(chat_id, text, username=None, **kwargs):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param chat_id: ID —á–∞—Ç–∞
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
    :param kwargs: –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è send_message
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.log_message(
            user_id=chat_id,
            username="BOT",
            message=text,
            is_bot=True
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    welcome_text = """
    üì∞ <b>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç –†–ë–ö</b> üì∞

    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    - üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: 5 —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å rbc.ru
    - üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π: –ù–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ
    - üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –ë–∏–∑–Ω–µ—Å, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –¥—Ä.
    - ‚ÑπÔ∏è –ü–æ–º–æ—â—å: –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
    """

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.log_message(
        user_id=message.from_user.id,
        username=message.from_user.username,
        message=message.text
    )

    log_and_send(
        message.chat.id,
        welcome_text,
        parse_mode='HTML',
        reply_markup=create_main_keyboard()
    )


@bot.message_handler(func=lambda msg: msg.text == 'üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏')
def send_latest_news(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logger.log_message(
            user_id=message.from_user.id,
            username=message.from_user.username,
            message=message.text
        )

        bot.send_chat_action(message.chat.id, 'typing')
        news = parser.parse_rbc_news()

        if not news:
            log_and_send(
                message.chat.id,
                "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_main_keyboard()
            )
            return

        for item in news:
            news_text = f"""
            <b>{item['title']}</b>
            <i>{item['time']}</i>\n
            {item['text']}
            <a href="{item['url']}">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Üí</a>
            """
            log_and_send(
                message.chat.id,
                news_text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )

        log_and_send(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        log_and_send(
            message.chat.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π",
            reply_markup=create_main_keyboard()
        )


@bot.message_handler(func=lambda msg: msg.text == 'üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π')
def ask_search_term(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞"""
    logger.log_message(
        user_id=message.from_user.id,
        username=message.from_user.username,
        message=message.text
    )

    msg = log_and_send(
        message.chat.id,
        "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, process_search_term)


def process_search_term(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        logger.log_message(
            user_id=message.from_user.id,
            username=message.from_user.username,
            message=message.text
        )

        bot.send_chat_action(message.chat.id, 'typing')
        news = parser.get_news_by_keyword(message.text)

        if not news:
            log_and_send(
                message.chat.id,
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=create_main_keyboard()
            )
            return

        for item in news[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            news_text = f"""
            <b>{item['title']}</b> ({item['source']})
            {item['summary']}
            <a href="{item['url']}">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Üí</a>
            """
            log_and_send(
                message.chat.id,
                news_text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )

        log_and_send(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        log_and_send(
            message.chat.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π",
            reply_markup=create_main_keyboard()
        )


@bot.message_handler(func=lambda msg: msg.text == 'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
def show_categories(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    logger.log_message(
        user_id=message.from_user.id,
        username=message.from_user.username,
        message=message.text
    )

    categories = parser.get_news_categories()
    keyboard = types.InlineKeyboardMarkup(row_width=2)

    for category in categories:
        keyboard.add(
            types.InlineKeyboardButton(
                text=category.capitalize(),
                callback_data=f"cat_{category}"
            )
        )

    log_and_send(
        message.chat.id,
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('cat_'))
def handle_category(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category = call.data.split('_')[1]
        logger.log_message(
            user_id=call.from_user.id,
            username=call.from_user.username,
            message=f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
        )

        bot.answer_callback_query(call.id, f"–ó–∞–≥—Ä—É–∂–∞–µ–º {category}...")
        bot.send_chat_action(call.message.chat.id, 'typing')

        news = parser.get_news_by_category(category)

        if not news:
            log_and_send(
                call.message.chat.id,
                f"–ù–æ–≤–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=create_main_keyboard()
            )
            return

        for item in news[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–æ–≤–æ—Å—Ç–∏
            news_text = f"""
            <b>{item['title']}</b> ({item['source']})
            {item['summary']}
            <a href="{item['url']}">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Üí</a>
            """
            log_and_send(
                call.message.chat.id,
                news_text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )

        log_and_send(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        log_and_send(
            call.message.chat.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=create_main_keyboard()
        )


@bot.message_handler(func=lambda msg: msg.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = """
    ‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

    <b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏</b> - 5 —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å rbc.ru
    <b>üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π</b> - –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    <b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b> - –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

    –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç –≤–µ—Ä–Ω—ë—Ç –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """

    logger.log_message(
        user_id=message.from_user.id,
        username=message.from_user.username,
        message=message.text
    )

    log_and_send(
        message.chat.id,
        help_text,
        parse_mode='HTML',
        reply_markup=create_main_keyboard()
    )


@bot.message_handler(func=lambda msg: True)
def log_all_messages(message):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    logger.log_message(
        user_id=message.from_user.id,
        username=message.from_user.username,
        message=message.text
    )


if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    if not os.path.exists('user_logs'):
        os.makedirs('user_logs')

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.infinity_polling()